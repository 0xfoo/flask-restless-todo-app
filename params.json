{"name":"Flask-Todolist","tagline":"todolist web application - build using Flask and Skeleton","body":"\r\n# Hello Traveler.\r\n\r\nThis page assembles some information around my Flask-Todolist project.\r\n\r\nThe idea was to explore the Flask-ecosystem and try to build a small web application. Small as it should not be fancy in any way, but atleast tackle the most common patterns/features of a web application.\r\n\r\nSo you'll find an API, User-Management (Register/Login) and the accoring views + to-do lists (obviously).\r\nIf your interested, check it out! In 3 Steps you can get up and running:\r\n\r\n```\r\npip install -r requirements.txt\r\npython manage.py fill_db\r\npython manage.py runserver\r\n```\r\n\r\nNow you can explore the app on <http://localhost:5000/>\r\n\r\n\r\n## Reasons for this project\r\nAs mentioned before, the reason for the existence of this project is for me to explore Flask and its many extensions.\r\n\r\nAt this point I'm fairly new to web development and wanted to get started in an uncomplicated fashion, thus Flask seemed reasonable.\r\nAlso this project might be a quick start for other developers looking into Flask.\r\n\r\n\r\n## Encouragement\r\nFlask is cool! Let me show it.\r\n\r\n```python\r\n@api.route('/todolists/')\r\ndef get_todolists():\r\n    todolists = TodoList.query.all()\r\n    return jsonify({\r\n        'todolists': [todolist.to_json() for todolist in todolists]\r\n    })\r\n```\r\n\r\nJust 6 lines for an API view, which will display all todolists as JSON.\r\n\r\nThe decorator does multiple things. It registers a route on the api blueprint. Which are the Flask way of modularization. As I see it, equivalent to apps in Django.\r\nHere the api blueprint is prefixed with 'api', i.e. <http://localhost:5000/api/todolists/> would be the link for the above view.\r\n\r\nTodoList is a class based upon SQLAlchemy which is seemingly the way to go in terms of an ORM for Flask (specifically Flask-SQLAlchemy).\r\nAnd jsonify is a funciton comming from Flask which will return a proper JSON response of a dictionary. Which here is a neat list comprehension of json representations of todolists.\r\n\r\n\r\n## Discouragement\r\nFlask is a micro web development framework for Python.\r\n\r\nWell sounds pretty good, right? So it did to me, and still does. The problem or atleast my problem is not with Flask per se, but with the extensions.\r\n\r\nIn this project I used a few and most of the time it is a breeze, but sometimes you'll find some weird behaviour or don't really get how it works or worse why it doesn't.\r\nAlthough often documentation can be found, it mostly covers quick starts and easy examples, but falls short on going deeper.\r\n\r\nSo if you, like me, are new to web development this can be discouraging.\r\n\r\n\r\n## Meta\r\nTo my fellow travelers I want to say that I found it really usefull to enter such a project. Small enough to do on the side and large enough to actually learn something.\r\n\r\nSo I'd like to encourage you to try something like this yourself. Not necessarily a Flask project or even a web related one, just something that make you curious.\r\n\r\nHere some tips for you adventurers:\r\n\r\n* set limits, may it be time or scope\r\n* don't bang your head to hard against the wall\r\n* [YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)\r\n* have fun\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}